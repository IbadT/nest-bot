// import { Injectable, Logger } from "@nestjs/common";
import { Injectable, Inject } from "@nestjs/common";
import { InjectBot } from "nestjs-telegraf";
import { Context, Telegraf } from "telegraf";
import { Logger } from "winston";
import { WINSTON_MODULE_PROVIDER } from 'nest-winston';
import { getAllSessions } from "src/middleware/session.middleware";
import { PrismaService } from "src/prisma.service";
import { ENUM_KEYBOARDS, adminButton, adminButtons, mainMenuButtons, searchJobsButtons, viewStatsButtons } from "./keyboards/hh_keyboards";
import { sendReplyWithButtons, updateButtons } from "./utils/utils";
import { TUser } from "./types/user.type";
import { ConfigService } from "@nestjs/config";
import { replyMessageForReply } from "./helpers/replyMessageForReply";

// {
//     id: 504081934,
//     is_bot: false,
//     first_name: 'Eduard',
//     last_name: 'Kononovich‰∏≠ÂõΩüë®‚Äçüíª',
//     username: 'Drm_it_bad',
//     language_code: 'ru'
// }






@Injectable()
export class TelegramService {

    constructor(
        @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,
        private readonly prisma: PrismaService,
        private readonly configService: ConfigService
    ) {}

    // /**
    //  * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª–æ–∂–µ–Ω–∏—è –¥–≤—É—Ö —á–∏—Å–µ–ª.
    //  * @param a –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ.
    //  * @param b –í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ.
    //  * @returns –°—É–º–º–∞ –¥–≤—É—Ö —á–∏—Å–µ–ª.
    //  */ 

    /**
     * 
     * @param ctx 
     * @returns 
     */
    async showMainMenu(
        ctx: any
    ) {
        ctx.session.__scenes = "";
        this.logger.info("–í—ã–∑–≤–∞–Ω showMainMenu");
        if(!ctx.session.is_auth) {
            await this.register({ telegram_id: ctx.from.id, username: ctx.from.username });
            // –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å user_id, –∏–ª–∏ –ª—É—á—à–µ –∑–∞–ø–∏—Å–∞—Ç—å is_auth: true
            ctx.session.tg_id = ctx.from.id;
            ctx.session.is_auth = true;
        };
        if(ctx.from.id === 504081934 && !mainMenuButtons.some(button => button[0].callback_data === ENUM_KEYBOARDS.ADMIN_PANEL)) {
            mainMenuButtons.unshift(...adminButton)
            await ctx.reply(`–≠–¥—É–∞—Ä–¥ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å!`);
        } else {
            await ctx.reply(`${ctx.from.first_name}, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å!`);
        };
        // return await this.sendQuiz(ctx);
        await sendReplyWithButtons(ctx, '–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?', mainMenuButtons)
    };



    async adminPanel(ctx: any) {
        // await sendReplyWithButtons(ctx, "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", adminButtons);
        await updateButtons(ctx, adminButtons);
    };


    async userCount(ctx: any) {
        const users = await this.prisma.user.findMany({
            where: {
                NOT: {
                    telegram_id: ctx.from.id
                }
            }
        });
        const userCount = users.length; 
        let userList = `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}\n\n`; 
        users.forEach(user => { 
            userList += `ID: ${user.id}\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @${user.username}\n\n`; 
        }); 
        // await ctx.reply(userList);
        await sendReplyWithButtons(ctx, userList, [viewStatsButtons[3]])
    }


    async viewStats(ctx: any) {
        // await sendReplyWithButtons(ctx, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", viewStatsButtons)
        await updateButtons(ctx, viewStatsButtons);
    };


    async backToAdmin(ctx: any) {
        await updateButtons(ctx, adminButtons);
    };

    async backToMain(ctx: any) {
        await updateButtons(ctx, mainMenuButtons);
    };



    async searchJobs(ctx: any) {
        // await updateButtons(ctx, searchJobsButtons);
        const apiUrl = 'https://api.hh.ru/vacancies';
        // const keyword = 'Javascript'
        // const keyword = 'Backend'
        const keyword = 'Node.js'
        const url = `${apiUrl}?text=${encodeURIComponent(keyword)}`
        const response = await fetch(url);
        if(!response.ok) {
            throw new Error('Failed to fetch vacancies from hh.ru');
        };
        const data = await response.json();

        let message = '–í–∞–∫–∞–Ω—Å–∏–∏:\n\n'; 
        data.items.forEach(vacancy => { 
            message += `–ù–∞–∑–≤–∞–Ω–∏–µ: ${vacancy.name}\n`; 
            message += `–ó–∞—Ä–ø–ª–∞—Ç–∞: ${vacancy.salary ? `${vacancy.salary.from} - ${vacancy.salary.to} ${vacancy.salary.currency}` : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n`; 
            message += `URL: ${vacancy.alternate_url}\n\n`;

        });
        return await ctx.reply(message);
    }

    async hhRegister(ctx: any) {
        // –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ
    }

















    async onTextHandleAction(ctx: any, message: string): Promise<void> {
        ctx.session.__scenes = "–í–≤–µ–¥–∏—Ç–µ client_id";
        this.logger.info("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è onTextHandleAction");
        await replyMessageForReply(ctx, message, this.logger);
    }






























    /**
     * –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     * @param telegram_id 
     * @returns true or false
     */
    async checkAuthUser(telegram_id: number) {
        this.logger.info("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è checkAuthUser");
        try {
            const checkUser = await this.prisma.user.findUnique({
                where: { telegram_id }
            });
            return Boolean(checkUser);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ :", error);
            this.logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
        }
    };

    async handlePollAnswer(ctx: Context) {
        console.log({ poll: ctx.pollAnswer });
        
        const pollAnswer = ctx.pollAnswer;
        const userId = pollAnswer.user.id;
        const selectedOption = pollAnswer.option_ids[0];
    
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–æ—Å–∞
        if (selectedOption === 0) {
          await ctx.telegram.sendMessage(userId, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!');
        } else {
          await ctx.telegram.sendMessage(userId, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π.');
        }
    };
    

    async sendQuiz(ctx: Context) {
        const question = '–ö–∞–∫–æ–π —Ü–≤–µ—Ç –Ω–µ–±–æ?';
        const options = ['–°–∏–Ω–∏–π', '–ö—Ä–∞—Å–Ω—ã–π', '–ó–µ–ª—ë–Ω—ã–π', '–ñ—ë–ª—Ç—ã–π'];
        
        await ctx.replyWithQuiz(question, options, {
          correct_option_id: 0, // –ò–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
          is_anonymous: true,   // –î–µ–ª–∞–µ—Ç –∫–≤–∏–∑ –∞–Ω–æ–Ω–∏–º–Ω—ã–º
        //   type: 'quiz',

        reply_markup: {
            inline_keyboard: [
              [{ text: 'üí° –ü–æ—è—Å–Ω–µ–Ω–∏–µ', callback_data: 'explanation' }],
            ],
          },
        });
    }


    async register(user: TUser) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const existingUser = await this.prisma.user.findUnique({
            where: { telegram_id: user.telegram_id }
        });
    
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (existingUser) {
            console.log(existingUser);
            return existingUser;
        }
    
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        return await this.prisma.user.create({
            data: user
        });
    }
    
};







// GET_ACCESS_TOKEN_URL
// {
//   "access_token": "exampleAccessTokenRandomSymbols012345678900000000000000000000000",
//   "token_type": "bearer",
//   "expires_in": 1209600,
//   "refresh_token": "exampleRefreshTokenRandomSymbols01234567890000000000000000000000"
// }


// GET_VACANCIES
// {
//     "arguments": [
//       {
//         "argument": "page",
//         "cluster_group": null,
//         "disable_url": "https://...",
//         "value": "0",
//         "value_description": null
//       },
//       {
//         "argument": "professional_role",
//         "cluster_group": {
//           "id": "professional_role",
//           "name": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–æ–ª—å"
//         },
//         "disable_url": "https://...",
//         "value": "90",
//         "value_description": "–û—Ö—Ä–∞–Ω–Ω–∏–∫"
//       }
//     ],
//     "clusters": null,
//     "fixes": null,
//     "found": 13,
//     "items": [
//       {
//         "accept_incomplete_resumes": false,
//         "address": {
//           "building": "9—Å10",
//           "city": "–ú–æ—Å–∫–≤–∞",
//           "description": "–ù–∞ –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Å–ø–æ—Ä—Ç",
//           "lat": 55.807794,
//           "lng": 37.638699,
//           "metro_stations": [
//             {
//               "lat": 55.807794,
//               "line_id": "6",
//               "line_name": "–ö–∞–ª—É–∂—Å–∫–æ-–†–∏–∂—Å–∫–∞—è",
//               "lng": 37.638699,
//               "station_id": "6.8",
//               "station_name": "–ê–ª–µ–∫—Å–µ–µ–≤—Å–∫–∞—è"
//             }
//           ],
//           "street": "—É–ª–∏—Ü–∞ –ì–æ–¥–æ–≤–∏–∫–æ–≤–∞"
//         },
//         "alternate_url": "https://hh.ru/vacancy/8331228",
//         "apply_alternate_url": "https://hh.ru/applicant/vacancy_response?vacancyId=8331228",
//         "area": {
//           "id": "1",
//           "name": "–ú–æ—Å–∫–≤–∞",
//           "url": "https://api.hh.ru/areas/1"
//         },
//         "brand_snippet": {
//           "background": {
//             "color": null,
//             "gradient": {
//               "angle": 45,
//               "color_list": [
//                 {
//                   "color": "#FF0000",
//                   "position": 10
//                 },
//                 {
//                   "color": "#FA0000",
//                   "position": 9
//                 }
//               ]
//             }
//           },
//           "logo": "https://hhcdn.ru/00001.png",
//           "logo_scalable": {
//             "default": {
//               "height": 300,
//               "url": "https://hhcdn.ru/00021.png",
//               "width": 500
//             },
//             "xs": {
//               "height": 100,
//               "url": "https://hhcdn.ru/00022.png",
//               "width": 200
//             }
//           },
//           "logo_xs": "https://hhcdn.ru/00002.png",
//           "picture": "https://hhcdn.ru/00003.png",
//           "picture_scalable": {
//             "default": {
//               "height": 350,
//               "url": "https://hhcdn.ru/00023.png",
//               "width": 550
//             },
//             "xs": {
//               "height": 150,
//               "url": "https://hhcdn.ru/00024.png",
//               "width": 250
//             }
//           },
//           "picture_xs": "https://hhcdn.ru/00004.png"
//         },
//         "branding": {
//           "tariff": "BASIC",
//           "type": "CONSTRUCTOR"
//         },
//         "contacts": {
//           "email": "user@example.com",
//           "name": "–ò–º—è",
//           "phones": [
//             {
//               "city": "985",
//               "comment": null,
//               "country": "7",
//               "number": "000-00-00"
//             }
//           ]
//         },
//         "counters": {
//           "responses": 0
//         },
//         "department": {
//           "id": "HH-1455-TECH",
//           "name": "HeadHunter::–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç"
//         },
//         "employer": {
//           "accredited_it_employer": false,
//           "alternate_url": "https://hh.ru/employer/1455",
//           "id": "1455",
//           "logo_urls": {
//             "90": "https://hh.ru/employer-logo/289027.png",
//             "240": "https://hh.ru/employer-logo/289169.png",
//             "original": "https://hh.ru/file/2352807.png"
//           },
//           "name": "HeadHunter",
//           "trusted": true,
//           "url": "https://api.hh.ru/employers/1455"
//         },
//         "has_test": true,
//         "id": "8331228",
//         "insider_interview": {
//           "id": "12345",
//           "url": "https://hh.ru/interview/12345?employerId=777"
//         },
//         "name": "–°–µ–∫—Ä–µ—Ç–∞—Ä—å",
//         "personal_data_resale": false,
//         "professional_roles": [
//           {
//             "id": "90",
//             "name": "–û—Ö—Ä–∞–Ω–Ω–∏–∫"
//           }
//         ],
//         "published_at": "2013-07-08T16:17:21+0400",
//         "relations": [],
//         "response_letter_required": true,
//         "response_url": null,
//         "salary": {
//           "currency": "RUR",
//           "from": 30000,
//           "gross": true,
//           "to": null
//         },
//         "schedule": {
//           "id": "fullDay",
//           "name": "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å"
//         },
//         "show_logo_in_search": true,
//         "snippet": {
//           "requirement": "–í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ <highlighttext>—Å–µ–∫—Ä–µ—Ç–∞—Ä—è</highlighttext>, –æ—Ñ–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä–∞. –ó–Ω–∞–Ω–∏–µ –¥–µ–ª–æ–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞. –ö–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏.",
//           "responsibility": "–î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤–∫–∞, –∫–æ–Ω—Ç—Ä–æ–ª—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∏—Å–µ–º, –≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤, –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å). –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü–∏–∏. –ü—Ä–∏–µ–º –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤."
//         },
//         "sort_point_distance": 226.001293,
//         "type": {
//           "id": "open",
//           "name": "–û—Ç–∫—Ä—ã—Ç–∞—è"
//         },
//         "url": "https://api.hh.ru/vacancies/8331228"
//       }
//     ],
//     "page": 0,
//     "pages": 13,
//     "per_page": 1,
//     "suggests": null
// }